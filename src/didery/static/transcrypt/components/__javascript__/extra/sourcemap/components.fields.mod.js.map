{
	"version": 3,
	"file": "/Users/bradyhammond/Documents/Xaltry/didery/src/didery/static/transcrypt/components/__javascript__/components.fields.mod.js",
	"sources": [
		"/Users/bradyhammond/Documents/Xaltry/didery/src/didery/static/transcrypt/components/fields.py"
	],
	"sourcesContent": [
		"# ================================================== #\n#                       FIELDS                       #\n# ================================================== #\n# Author: Brady Hammond                              #\n# Created: 05/08/2018                                #\n# Last Edited:                                       #\n# Last Edited By:                                    #\n# ================================================== #\n#                      IMPORTS                       #\n# ================================================== #\n\n# ================================================== #\n#                  CLASS DEFINITIONS                 #\n# ================================================== #\n\nclass Field:\n    \"\"\"\n    Class for table field/columns.\n    \"\"\"\n    Title = None\n    Length = 4\n\n    __pragma__(\"kwargs\")\n    def __init__(self, title=None, length=None):\n        \"\"\"\n        Initialize Field object. Set title and length.\n        \"\"\"\n        self.title = self.Title\n        if title is not None:\n            self.title = title\n\n        self.mlength = self.Length\n        if length is not None:\n            self.mlength = length\n\n        self.name = self.title.lower()\n\n    __pragma__(\"nokwargs\")\n\n    # ============================================== #\n\n    def format(self, data):\n        \"\"\"\n        Formats the data to a string matching the expected view for this field.\n        \"\"\"\n        return str(data)\n\n    # ============================================== #\n\n    def shorten(self, string):\n        \"\"\"\n        Shortens the string to an appropriate length for display.\n        \"\"\"\n        return string\n\n    # ============================================== #\n\n    def view(self, data):\n        \"\"\"\n        Returns a vnode <td> suitable for display in a table.\n        \"\"\"\n        if data == None:\n            data = \"\"\n        formatted = self.format(data)\n        return m(\"td\", {\"title\": formatted}, self.shorten(formatted))\n\n# ================================================== #\n\nclass FillField(Field):\n    \"\"\"\n    Field that should \"use remaining space\" for display.\n    \"\"\"\n    Length = 100\n\n    def view(self, data):\n        node = super().view(data)\n        node.attrs[\"class\"] = \"fill-space\"\n        return node\n\n# ================================================== #\n\nclass DateField(Field):\n    \"\"\"\n    Field for displaying dates.\n    \"\"\"\n    Length = 12\n    Title = \"Date\"\n\n# ================================================== #\n\nclass EpochField(DateField):\n    \"\"\"\n    Field for displaying time since the epoch.\n    \"\"\"\n    def format(self, data):\n        # Make format match that of other typical dates from server\n        data = __new__(Date(data / 1000)).toISOString()\n        return super().format(data)\n\n# ================================================== #\n\nclass IDField(Field):\n    \"\"\"\n    Field for displaying ids.\n    \"\"\"\n    Length = 4\n    Title = \"UID\"\n    Header = \"\"\n\n    def format(self, string):\n        if string.startswith(self.Header):\n            string = string[len(self.Header):]\n\n        return super().format(string)\n\n# ================================================== #\n\nclass DIDField(IDField):\n    \"\"\"\n    Field for displaying dids.\n    \"\"\"\n    Header = \"did:dad:\"\n    Title = \"DID\"\n\n# ================================================== #\n#                        EOF                         #\n# ================================================== #"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAe
}