{
	"version": 3,
	"file": "/Users/bradyhammond/Documents/Xaltry/didery/src/didery/static/transcrypt/components/__javascript__/components.tables.mod.js",
	"sources": [
		"/Users/bradyhammond/Documents/Xaltry/didery/src/didery/static/transcrypt/components/tables.py"
	],
	"sourcesContent": [
		"# ================================================== #\n#                       TABLES                       #\n# ================================================== #\n# Author: Brady Hammond                              #\n# Created: 05/08/2018                                #\n# Last Edited:                                       #\n# Last Edited By:                                    #\n# ================================================== #\n#                      IMPORTS                       #\n# ================================================== #\n\nimport server\nimport components.fields as field\n\n# ================================================== #\n#                  CLASS DEFINITIONS                 #\n# ================================================== #\n\nclass Table:\n    \"\"\"\n    Class for table, headers, and display data..\n    \"\"\"\n    no_results_text = \"No results found.\"\n\n    def __init__(self, fields):\n        \"\"\"\n        Initializes Table object.\n\n            Parameters:\n            fields - Table fields objects\n        \"\"\"\n        self.max_size = 1000\n        self.fields = fields\n        self.data = []\n        self._shownData = []\n        self.view = {\n            \"view\": self._view\n        }\n\n        self._selected = None\n        self.detailSelected = \"\"\n\n        self.filter = None\n        self.sortField = None\n        self.reversed = False\n\n        self.total = 0\n        self.shown = 0\n\n    # ============================================== #\n\n    def _stringify(self, obj):\n        \"\"\"\n        Converts provided json-like object to user-friendly string.\n\n            Parameters:\n            obj - JSON like object\n        \"\"\"\n        def replacer(key, value):\n            if key.startswith(\"_\"):\n                return\n            return value\n        return JSON.stringify(obj, replacer, 2)\n\n    # ============================================== #\n\n    def _limitText(self):\n        \"\"\"\n        Limits displayed results.\n        \"\"\"\n        return \"Limited to {} results.\".format(self.max_size)\n\n    # ============================================== #\n\n    def _selectRow(self, event, obj):\n        \"\"\"\n        Deselects any previously selected row and selects row\n        specified in event.\n\n            Parameters:\n            event - Specified event\n            obj - Row data object\n        \"\"\"\n        if self._selected is not None:\n            del self._selected._selected\n\n            if self._selected._uid == obj._uid:\n                self._selected = None\n                self.detailSelected = \"\"\n                return\n\n        self._selected = obj\n        obj._selected = True\n        self.detailSelected = self._stringify(obj)\n\n    # ============================================== #\n\n    def refresh(self):\n        \"\"\"\n        Refreshes data from server and returns a promise that resolves\n        when finished.\n        \"\"\"\n        self._setData([])\n        p = __new__(Promise(lambda resolve: resolve()))\n        return Promise\n\n    # ============================================== #\n\n    def clear(self):\n        \"\"\"\n        Removes memory of all current data.\n        \"\"\"\n        self.total = 0\n        server.clearArray(self.data)\n\n    # ============================================== #\n\n    def _makeDummyData(self, count):\n        \"\"\"\n        Creates test data.\n\n            Parameters:\n            count - Integer\n        \"\"\"\n        data = []\n        for i in range(count):\n            obj = {}\n            for field in self.fields:\n                obj[field.name] = \"test{0} {1}\".format(i, field.name)\n            data.append(obj)\n        return data\n\n    # ============================================== #\n\n    __pragma__(\"kwargs\")\n    def _setData(self, data, clear=True):\n        \"\"\"\n        Clears existing data and uses provided data instead.\n        Adds \"_uid\" field to each piece of data, for internal tracking.\n\n            Parameters:\n            data - Input data\n            clear - Boolean\n        \"\"\"\n        if clear:\n            self.clear()\n        for datum in data:\n            datum._uid = self.total\n            self.data.append(datum)\n            self.total += 1\n        self._processData()\n    __pragma__(\"nokwargs\")\n\n    # ============================================== #\n\n    def setFilter(self, func):\n        \"\"\"\n        Sets table filter function.\n\n            Parameters:\n            func - Filter function\n        \"\"\"\n        if func != self.filter:\n            self.filter = func\n            self._processData()\n\n    # ============================================== #\n\n    def setSort(self, field):\n        \"\"\"\n        Sets sort on given field. If same as currently-sorted field,\n        reverse sort on said field.\n\n            Parameters:\n            field - Field to sort by\n        \"\"\"\n        if self.sortField == field:\n            self.reversed = not self.reversed\n        else:\n            self.reversed = False\n            self.sortField = field\n\n        self._sortData()\n\n    # ============================================== #\n\n    def _sortData(self):\n        \"\"\"\n        Sorts table data.\n        \"\"\"\n        if self.sortField is None:\n            return\n\n        self._shownData.sort(key=lambda obj: self._getField(obj, self.sortField), reverse=self.reversed)\n\n    # ============================================== #\n\n    def _processData(self):\n        \"\"\"\n        Processes data, determines which items to show, and\n        puts items into sorted list.\n        \"\"\"\n        server.clearArray(self._shownData)\n\n        self.shown = 0\n        for obj in self.data:\n            if self.shown >= self.max_size:\n                break\n            if self.filter is not None:\n                if not self.filter(obj):\n                    continue\n\n            self._shownData.append(obj)\n            self.shown += 1\n\n        self._sortData()\n\n    # ============================================== #\n\n    def _getField(self, obj, field):\n        \"\"\"\n        Gets info from object matching given field.\n\n            Parameters:\n            obj - Data object\n            field - Field/Key\n        \"\"\"\n        return obj[field.name]\n\n    # ============================================== #\n\n    def _makeRow(self, obj):\n        \"\"\"\n        Returns array of <td> vnodes representing a row.\n\n            Parameters:\n            obj - Data object\n        \"\"\"\n        return [field.view(self._getField(obj, field)) for field in self.fields]\n\n    # ============================================== #\n\n    def _view(self):\n        \"\"\"\n        Returns table markup.\n        \"\"\"\n        headers = []\n        for field in self.fields:\n            def makeScope(f):\n                return lambda event: self.setSort(f)\n            if field == self.sortField:\n                if self.reversed:\n                    icon = m(\"i.arrow.down.icon\")\n                else:\n                    icon = m(\"i.arrow.up.icon\")\n                header = m(\"th.ui.right.labeled.icon\", {\"onclick\": makeScope(field)},\n                           icon,\n                           field.title)\n            else:\n                header = m(\"th\", {\"onclick\": makeScope(field)}, field.title)\n\n            headers.append(header)\n\n        rows = []\n        for obj in self._shownData:\n            row = self._makeRow(obj)\n\n            def makeScope(o):\n                return lambda event: self._selectRow(event, o)\n            if obj._selected:\n                rows.append(m(\"tr.active\", {\"onclick\": makeScope(obj)}, row))\n            else:\n                rows.append(m(\"tr\", {\"onclick\": makeScope(obj)}, row))\n\n        if self.shown >= self.max_size:\n            rows.append(m(\"tr\", m(\"td\", self._limitText())))\n\n        if not self.shown:\n            rows.append(m(\"tr\", m(\"td\", self.no_results_text)))\n\n        return m(\"table\", {\"class\": \"ui selectable celled unstackable single line left aligned table\"},\n                 m(\"thead\",\n                   m(\"tr\", {\"class\": \"center aligned\"}, headers)\n                   ),\n                 m(\"tbody\",\n                   rows\n                   )\n                 )\n\n# ================================================== #\n\nclass ErrorsTable(Table):\n    \"\"\"\n    Class for errors table.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Initializes ErrorsTable object. Sets up error table fields.\n        \"\"\"\n        fields = [\n            field.FillField(\"Title\"),\n            field.FillField(\"Message\"),\n            field.DateField(\"Time\")\n        ]\n        super().__init__(fields)\n\n    # ============================================== #\n\n    def refresh(self):\n        \"\"\"\n        Refreshes table data.\n        \"\"\"\n        self.clear()\n        errors = server.manager.errors\n        return errors.refreshErrors().then(lambda: self._setData(errors.errors))\n\n    # ============================================== #\n\n    def _getField(self, obj, field):\n        \"\"\"\n        Extracts data from json-like object.\n\n            Parameters:\n            obj - Data object\n            field - Field/Key\n        \"\"\"\n        if field.name == \"title\":\n            return obj.title\n        elif field.name == \"message\":\n            return obj.msg\n        elif field.name == \"time\":\n            return obj.time\n\n# ================================================== #\n\nclass RelaysTable(Table):\n    \"\"\"\n    Class for relays table.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Initializes RelaysTable object. Sets up relays table fields.\n        \"\"\"\n        fields = [\n            field.FillField(\"Host\"),\n            field.FillField(\"Port\"),\n            field.FillField(\"Name\"),\n            field.FillField(\"Main\"),\n            field.IDField(\"UID\"),\n            field.FillField(\"Status\")\n        ]\n        super().__init__(fields)\n\n    # ============================================== #\n\n    def refresh(self):\n        \"\"\"\n        Refreshes table data.\n        \"\"\"\n        self.clear()\n        relays = server.manager.relays\n        return relays.refreshRelays().then(lambda: self._setData(relays.relays))\n\n    # ============================================== #\n\n    def _getField(self, obj, field):\n        \"\"\"\n        Extracts data from json-like object.\n\n            Parameters:\n            obj - Data object\n            field - Field/Key\n        \"\"\"\n        if field.name == \"host\":\n            return obj[\"host address\"]\n        elif field.name == \"port\":\n            return obj[\"port\"]\n        elif field.name == \"name\":\n            return obj[\"name\"]\n        elif field.name == \"main\":\n            return obj[\"main\"]\n        elif field.name == \"uid\":\n            return obj[\"uid\"]\n        elif field.name == \"status\":\n            return obj[\"status\"]\n\n# ================================================== #\n\nclass BlobsTable(Table):\n    \"\"\"\n    Class for blobs table.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Initializes BlobsTable object. Sets up blobs table fields.\n        \"\"\"\n        fields = [\n            field.DIDField(\"DID\"),\n            field.FillField(\"Blob\")\n        ]\n        super().__init__(fields)\n\n    # ============================================== #\n\n    def refresh(self):\n        \"\"\"\n        Refreshes table data.\n        \"\"\"\n        self.clear()\n        blobs = server.manager.otpBlobs\n        return blobs.refreshBlobs().then(lambda: self._setData(blobs.blobs))\n\n    # ============================================== #\n\n    def _getField(self, obj, field):\n        \"\"\"\n        Extracts data from json-like object.\n\n            Parameters:\n            obj - Data object\n            field - Field/Key\n        \"\"\"\n\n        if field.name == \"did\":\n            return obj.id\n        elif field.name == \"blob\":\n            return obj.blob\n\n# ================================================== #\n\n\n\"\"\"\n\"data\": [{\n    \"history\":\n    {\n        \"id\": \"did:dad:Qt27fThWoNZsa88VrTkep6H-4HA8tr54sHON1vWl6FE=\",\n        \"changed\" : \"2000-01-01T00:00:00+00:00\",\n        \"signer\": 2,\n        \"signers\":\n        [\n            \"Qt27fThWoNZsa88VrTkep6H-4HA8tr54sHON1vWl6FE=\",\n            \"Xq5YqaL6L48pf0fu7IUhL0JRaU2_RxFP0AL43wYn148=\",\n            \"dZ74MLZXD-1QHoa73w9pQ9GroAvxqFi2RTZWlkC0raY=\",\n            \"3syVH2woCpOvPF0SD9Z0bu_OxNe2ZgxKjTQ961LlMnA=\"\n        ]\n    },\n    \"signatures\":\n    [\n        \"AeYbsHot0pmdWAcgTo5sD8iAuSQAfnH5U6wiIGpVNJQQoYKBYrPPxAoIc1i5SHCIDS8KFFgf8i0tDq8XGizaCg==\",\n        \"o9yjuKHHNJZFi0QD9K6Vpt6fP0XgXlj8z_4D-7s3CcYmuoWAh6NVtYaf_GWw_2sCrHBAA2mAEsml3thLmu50Dw==\"\n    ]\n}, {\n    \"history\":\n    {\n        \"id\": \"did:igo:dZ74MLZXD-1QHoa73w9pQ9GroAvxqFi2RTZWlkC0raY=\",\n        \"changed\" : \"2000-01-01T00:00:00+00:00\",\n        \"signer\": 1,\n        \"signers\":\n        [\n            \"dZ74MLZXD-1QHoa73w9pQ9GroAvxqFi2RTZWlkC0raY=\",\n            \"Xq5YqaL6L48pf0fu7IUhL0JRaU2_RxFP0AL43wYn148=\",\n            \"dZ74MLZXD-1QHoa73w9pQ9GroAvxqFi2RTZWlkC0raY=\"\n        ]\n    },\n    \"signatures\":\n    [\n        \"o9yjuKHHNJZFi0QD9K6Vpt6fP0XgXlj8z_4D-7s3CcYmuoWAh6NVtYaf_GWw_2sCrHBAA2mAEsml3thLmu50Dw==\",\n        \"o9yjuKHHNJZFi0QD9K6Vpt6fP0XgXlj8z_4D-7s3CcYmuoWAh6NVtYaf_GWw_2sCrHBAA2mAEsml3thLmu50Dw==\"\n    ]\n}]\"\"\"\nclass HistoryTable(Table):\n    \"\"\"\n    Class for history table.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Initializes HistoryTable object. Sets up history table fields.\n        \"\"\"\n        fields = [\n            field.DIDField(\"DID\"),\n            field.DateField(\"Changed\"),\n            field.FillField(\"Signer\"),\n            field.FillField(\"Signers\"),\n            field.FillField(\"Signatures\")\n        ]\n        super().__init__(fields)\n\n    # ============================================== #\n\n    def refresh(self):\n        \"\"\"\n        Refreshes table data.\n        \"\"\"\n        self.clear()\n        history = server.manager.history\n        return history.refreshHistory().then(lambda: self._setData(history.history))\n\n    # ============================================== #\n\n    def _getField(self, obj, field):\n        \"\"\"\n        Extracts data from json-like object.\n\n            Parameters:\n            obj - Data object\n            field - Field/Key\n        \"\"\"\n\n        if field.name == \"did\":\n            return obj.history.id\n        elif field.name == \"changed\":\n            return obj.history.changed\n        elif field.name == \"signer\":\n            return obj.history.signer\n        elif field.name == \"signers\":\n            return obj.history.signers\n        elif field.name == \"signatures\":\n            return obj.signatures\n\n# ================================================== #\n#                        EOF                         #\n# ================================================== #"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqgBA;AArgBA;AAWA;AACA;AAMA;AAAA;AAIA;AAEA;AAOA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AAOA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAIA;AAAA;AAIA;AASA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAIA;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AAIA;AAIA;AACA;AAAA;AAIA;AAOA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAIA;AAOA;AACA;AACA;AAAA;AAAA;AAIA;AAQA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAIA;AAIA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AAKA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAIA;AAQA;AAAA;AAIA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAMA;AAAA;AAAA;AAOA;AAAA;AAIA;AAOA;AAEA;AAAA;AAIA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAQA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAIA;AAUA;AAEA;AAAA;AAIA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAQA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAIA;AAMA;AAEA;AAAA;AAIA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AASA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AA4CA;AAAA;AAIA;AASA;AAEA;AAAA;AAIA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AASA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}