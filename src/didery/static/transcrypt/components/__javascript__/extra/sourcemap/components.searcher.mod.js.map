{
	"version": 3,
	"file": "/Users/bradyhammond/Documents/Xaltry/didery/src/didery/static/transcrypt/components/__javascript__/components.searcher.mod.js",
	"sources": [
		"/Users/bradyhammond/Documents/Xaltry/didery/src/didery/static/transcrypt/components/searcher.py"
	],
	"sourcesContent": [
		"# ================================================== #\n#                     DASHBOARD                      #\n# ================================================== #\n# Author: Brady Hammond                              #\n# Created: 05/14/2018                                #\n# Last Edited:                                       #\n# Last Edited By:                                    #\n# ================================================== #\n#                      IMPORTS                       #\n# ================================================== #\n\n# ================================================== #\n#                  CLASS DEFINITIONS                 #\n# ================================================== #\n\nclass Searcher:\n    \"\"\"\n    Class to search for a certain string in any dict object.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Initializes Searcher object.\n        \"\"\"\n        self.searchTerm = None\n        self.caseSensitive = False\n\n    # ============================================== #\n\n    def setSearch(self, term):\n        \"\"\"\n        Sets search term. If term is surrounded by quotes, removes\n        them and makes search case sensitive. Otherwise, search is\n        not case sensitive.\n\n            Parameters::\n            term - Base search string\n        \"\"\"\n        self.searchTerm = term or \"\"\n        self.caseSensitive = self.searchTerm.startswith('\"') and self.searchTerm.endswith('\"')\n        if self.caseSensitive:\n            self.searchTerm = self.searchTerm[1:-1]\n        else:\n            self.searchTerm = self.searchTerm.lower()\n\n    # ============================================== #\n\n    def _checkPrimitive(self, item):\n        \"\"\"\n        Checks for search term in provided string.\n        \"\"\"\n        if isinstance(item, str):\n            if not self.caseSensitive:\n                item = item.lower()\n            return self.searchTerm in item\n        return False\n\n    # ============================================== #\n\n    def _checkAny(self, value):\n        \"\"\"\n        Checks for search term in any provided dict, list, or primitive type.\n        \"\"\"\n        if isinstance(value, dict) or isinstance(value, Object):\n            return self.search(value)\n        elif isinstance(value, list):\n            for item in value:\n                if self._checkAny(item):\n                    return True\n            return False\n        else:\n            return self._checkPrimitive(value)\n\n    # ============================================== #\n\n    def search(self, obj: dict):\n        \"\"\"\n        Returns True if obj recursively contains search term string in any field.\n        \"\"\"\n        __pragma__(\"jsiter\")\n        for key in obj:\n            if key.startswith(\"_\"):\n                continue\n\n            value = obj[key]\n            if self._checkAny(value):\n                return True\n        return False\n        __pragma__(\"nojsiter\")\n\n# ================================================== #\n#                        EOF                         #\n# ================================================== #"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAIA;AAIA;AACA;AAAA;AAIA;AASA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAIA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAIA;AAKA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}