{
	"version": 3,
	"file": "/Users/bradyhammond/Documents/Xaltry/didery/src/didery/static/transcrypt/__javascript__/server.mod.js",
	"sources": [
		"/Users/bradyhammond/Documents/Xaltry/didery/src/didery/static/transcrypt/server.py"
	],
	"sourcesContent": [
		"# ================================================== #\n#                      SERVER                        #\n# ================================================== #\n# Author: Brady Hammond                              #\n# Created: 05/03/2018                                #\n# Last Edited:                                       #\n# Last Edited By:                                    #\n# ================================================== #\n#                      IMPORTS                       #\n# ================================================== #\n\n# ================================================== #\n#                 CONSTANTS & GLOBALS                #\n# ================================================== #\n\nDEFAULT_INTERVAL = 1000\n\n# ================================================== #\n#                     FUNCTIONS                      #\n# ================================================== #\n\n__pragma__(\"kwargs\")\ndef request(path, **kwargs):\n    \"\"\"\n    Performs a mithril GET request.\n\n        Parameters:\n        path - Endpoint string\n        kwargs - Dictionary of path query arguments\n\n        Returns:\n        Promise from m.request\n    \"\"\"\n    path += \"?\"\n    for key, value in kwargs.items():\n        path += key + \"=\" + str(value) + \"&\"\n    path = path[:-1]\n    return m.request(path)\n\n# ================================================== #\n\ndef onlyOne(func, interval=1000):\n    \"\"\"\n    Enforces the promise function. Never called more than once\n    per interval.\n\n        Parameters:\n        func - Executor function\n        interval - Promise interval in milliseconds\n    \"\"\"\n    scope = {\"promise\": None, \"lastCalled\": 0}\n\n    def wrap():\n        now = __new__(Date())\n        if scope.promise != None and now - scope.lastCalled < interval:\n            return scope.promise\n\n        scope.lastCalled = now\n\n        def f(resolve, reject):\n            p = func()\n            p.then(resolve)\n            p.catch(reject)\n        scope.promise = __new__(Promise(f))\n        return scope.promise\n    return wrap\n__pragma__(\"nokwargs\")\n\n# ================================================== #\n#                  CLASS DEFINITIONS                 #\n# ================================================== #\n\ndef clearArray(a):\n    \"\"\"\n    Clears an array/list.\n\n        Parameters:\n        a - Array/List to be cleared\n    \"\"\"\n    while len(a):\n        a.pop()\n\n# ================================================== #\n\nclass Manager:\n    \"\"\"\n    Class for managing server calls.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Initialize Manager object. Loads all server calls.\n        \"\"\"\n        self.errors = Errors()\n        self.history = History()\n        self.otpBlobs = OTPBlobs()\n        self.relays = Relays()\n\n# ================================================== #\n\nclass Errors:\n    \"\"\"\n    Class for error server call.\n    \"\"\"\n    Refresh_Interval = DEFAULT_INTERVAL\n    # Refresh rates should never exceed the default interval rate.\n\n    def __init__(self):\n        \"\"\"\n        Initialize Errors object.\n        \"\"\"\n        self.errors = []\n        self.refreshErrors = onlyOne(self._refreshErrors, interval=self.Refresh_Interval)\n\n    # ============================================== #\n\n    def _refreshErrors(self):\n        \"\"\"\n        Clears error array and retrieves fresh error data.\n        \"\"\"\n\n        clearArray(self.errors)\n        return request(\"/errors\").then(self._parseAll)\n\n    # ============================================== #\n\n    def _parseAll(self, data):\n        \"\"\"\n        Parses returned error data.\n\n            Parameters:\n            data - Returned error data\n\n            Example:\n            [\n                {\n                    \"title\": \"Invalid Signature.\",\n                    \"msg\": \"did:dad:Qt27fThWoNZsa88VrTkep6H-4HA8tr54sHON1vWl6FE= had an invalid rotation signature.\",\n                    \"time\": \"2000-01-01T00:00:00+00:00\"\n                },\n                {\n                    \"title\": \"Relay Unreachable.\",\n                    \"msg\": \"Could not establish a connection with relay servers.\",\n                    \"time\": \"2000-01-01T11:00:00+00:00\"\n                }\n            ]\n        \"\"\"\n\n        for error in data['data']:\n            self.errors.append(error)\n        \"\"\"\n        errors = dict(JSON.parse(data))\n        for key, value in errors.items():\n            self.errors.append(value)\n        \"\"\"\n\n# ================================================== #\n\nclass History:\n    \"\"\"\n    Class for history server call.\n    \"\"\"\n    Refresh_Interval = DEFAULT_INTERVAL\n    # Refresh rates should never exceed the default interval rate.\n\n    def __init__(self):\n        \"\"\"\n        Initialize History object.\n        \"\"\"\n        self.history = []\n        self.refreshHistory = onlyOne(self._refreshHistory, interval=self.Refresh_Interval)\n\n    # ============================================== #\n\n    def _refreshHistory(self):\n        \"\"\"\n        Clears history array and retrieves fresh history data.\n        \"\"\"\n\n        clearArray(self.history)\n        return request(\"/history\").then(self._parseAll)\n\n    # ============================================== #\n\n    def _parseAll(self, data):\n        \"\"\"\n        Parses returned history data.\n\n            Parameters:\n            data - Returned history data\n\n            Example:\n            {\n                \"data\": [{\n                    \"history\":\n                    {\n                        \"id\": \"did:dad:Qt27fThWoNZsa88VrTkep6H-4HA8tr54sHON1vWl6FE=\",\n                        \"changed\" : \"2000-01-01T00:00:00+00:00\",\n                        \"signer\": 2,\n                        \"signers\":\n                        [\n                            \"Qt27fThWoNZsa88VrTkep6H-4HA8tr54sHON1vWl6FE=\",\n                            \"Xq5YqaL6L48pf0fu7IUhL0JRaU2_RxFP0AL43wYn148=\",\n                            \"dZ74MLZXD-1QHoa73w9pQ9GroAvxqFi2RTZWlkC0raY=\",\n                            \"3syVH2woCpOvPF0SD9Z0bu_OxNe2ZgxKjTQ961LlMnA=\"\n                        ]\n                    },\n                    \"signatures\":\n                    [\n                        \"AeYbsHot0pmdWAcgTo5sD8iAuSQAfnH5U6wiIGpVNJQQoYKBYrPPxAoIc1i5SHCIDS8KFFgf8i0tDq8XGizaCg==\",\n                        \"o9yjuKHHNJZFi0QD9K6Vpt6fP0XgXlj8z_4D-7s3CcYmuoWAh6NVtYaf_GWw_2sCrHBAA2mAEsml3thLmu50Dw==\"\n                    ]\n                }, {\n                    \"history\":\n                    {\n                        \"id\": \"did:igo:dZ74MLZXD-1QHoa73w9pQ9GroAvxqFi2RTZWlkC0raY=\",\n                        \"changed\" : \"2000-01-01T00:00:00+00:00\",\n                        \"signer\": 1,\n                        \"signers\":\n                        [\n                            \"dZ74MLZXD-1QHoa73w9pQ9GroAvxqFi2RTZWlkC0raY=\",\n                            \"Xq5YqaL6L48pf0fu7IUhL0JRaU2_RxFP0AL43wYn148=\",\n                            \"dZ74MLZXD-1QHoa73w9pQ9GroAvxqFi2RTZWlkC0raY=\"\n                        ]\n                    },\n                    \"signatures\":\n                    [\n                        \"o9yjuKHHNJZFi0QD9K6Vpt6fP0XgXlj8z_4D-7s3CcYmuoWAh6NVtYaf_GWw_2sCrHBAA2mAEsml3thLmu50Dw==\",\n                        \"o9yjuKHHNJZFi0QD9K6Vpt6fP0XgXlj8z_4D-7s3CcYmuoWAh6NVtYaf_GWw_2sCrHBAA2mAEsml3thLmu50Dw==\"\n                    ]\n                }]\n            }\n\n        \"\"\"\n\n        history = dict(JSON.parse(data))\n        for key, value in history['data'].items():\n            self.history.append(value)\n\n# ================================================== #\n\nclass OTPBlobs:\n    \"\"\"\n    Class for otp blob server call.\n    \"\"\"\n    Refresh_Interval = DEFAULT_INTERVAL\n\n    # Refresh rates should never exceed the default interval rate.\n\n    def __init__(self):\n        \"\"\"\n        Initialize OTPBlob object.\n        \"\"\"\n        self.blobs = []\n        self.refreshBlobs = onlyOne(self._refreshBlobs, interval=self.Refresh_Interval)\n\n    # ============================================== #\n\n    def _refreshBlobs(self):\n        \"\"\"\n        Clears blob array and retrieves fresh blob data.\n        \"\"\"\n\n        clearArray(self.blobs)\n        return request(\"/relay\").then(self._parseAll)\n\n    # ============================================== #\n\n    def _parseAll(self, data):\n        \"\"\"\n        Parses returned blob data.\n\n            Parameters:\n            data - Returned blob data\n\n            Example:\n            {\n                \"data\": [{\n                    \"id\": \"did:dad:Qt27fThWoNZsa88VrTkep6H-4HA8tr54sHON1vWl6FE=\",\n                    \"blob\": \"AeYbsHot0pmdWAcgTo5sD8iAuSQAfnH5U6wiIGpVNJQQoYKBYrPPxAoIc1i5SHCIDS8KFFgf8i0tDq8XGizaCgo9yjuKHHNJZFi0QD9K6Vpt6fP0XgXlj8z_4D-7s3CcYmuoWAh6NVtYaf_GWw_2sCrHBAA2mAEsml3thLmu50Dw\"\n                },\n                {\n                    \"id\": \"did:igo:dZ74MLZXD-1QHoa73w9pQ9GroAvxqFi2RTZWlkC0raY=\",\n                    \"blob\": \"AeYbsHot0pmdWAcgTo5sD8iAuSQAfnH5U6wiIGpVNJQQoYKBYrPPxAoIc1i5SHCIDS8KFFgf8i0tDq8XGizaCgo9yjuKHHNJZFi0QD9K6Vpt6fP0XgXlj8z_4D-7s3CcYmuoWAh6NVtYaf_GWw_2sCrHBAA2mAEsml3thLmu50Dw\"\n                }]\n            }\n        \"\"\"\n        blobs = dict(JSON.parse(data))\n        for key, value in blobs['data'].items():\n            self.blobs.append(value)\n\n# ================================================== #\n\nclass Relays:\n    \"\"\"\n    Class for relays server call.\n    \"\"\"\n    Refresh_Interval = DEFAULT_INTERVAL\n    # Refresh rates should never exceed the default interval rate.\n\n    def __init__(self):\n        \"\"\"\n        Initialize Relays object.\n        \"\"\"\n        self.relays = []\n        self.refreshRelays = onlyOne(self._refreshRelays, interval=self.Refresh_Interval)\n\n    # ============================================== #\n\n    def _refreshRelays(self):\n        \"\"\"\n        Clears relay array and retrieves fresh relay data.\n        \"\"\"\n\n        clearArray(self.relays)\n        return request(\"/relay\").then(self._parseAll)\n\n    # ============================================== #\n\n    def _parseAll(self, data):\n        \"\"\"\n        Parses returned relay data.\n\n            Parameters:\n            data - Returned relay data\n\n            Example:\n            {\n                \"1\": {\n                    \"host address\": \"127.0.0.1\",\n                    \"port\": 7541,\n                    \"name\": \"alpha\",\n                    \"main\": True,\n                    \"uid\": \"1\",\n                    \"status\": \"connected\"\n                },\n                \"2\": {\n                    \"host address\": \"127.0.0.1\",\n                    \"port\": 7542,\n                    \"name\": \"beta\",\n                    \"main\": False,\n                    \"uid\": \"2\",\n                    \"status\": \"connected\"\n                }\n            }\n        \"\"\"\n        relays = dict(JSON.parse(data))\n        for key, value in relays.items():\n            self.relays.append(value)\n\n# ================================================== #\n#                       MAIN                         #\n# ================================================== #\n\nmanager = Manager()\n\n# ================================================== #\n#                        EOF                         #\n# ================================================== #"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAesBA;AACA;AAAA;AAAA;AAAA;AASA;AAAA;AAIA;AAGA;AAIA;AACA;AAAA;AAIA;AAKA;AACA;AAAA;AAIA;AAmDA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAIA;AAIA;AAIA;AACA;AAAA;AAIA;AAKA;AACA;AAAA;AAIA;AAmBA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAIA;AAGA;AAIA;AACA;AAAA;AAIA;AAKA;AACA;AAAA;AAIA;AA2BA;AACA;AACA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}