{
	"version": 3,
	"file": "/Users/bradyhammond/Documents/Xaltry/didery/src/didery/static/transcrypt/__javascript__/dashboard.mod.js",
	"sources": [
		"/Users/bradyhammond/Documents/Xaltry/didery/src/didery/static/transcrypt/dashboard.py"
	],
	"sourcesContent": [
		"# ================================================== #\n#                     DASHBOARD                      #\n# ================================================== #\n# Author: Brady Hammond                              #\n# Created: 04/26/2018                                #\n# Last Edited:                                       #\n# Last Edited By:                                    #\n# ================================================== #\n#                      IMPORTS                       #\n# ================================================== #\n\nimport server\n\n# ================================================== #\n#                  CLASS DEFINITIONS                 #\n# ================================================== #\n\nclass Tab:\n    \"\"\"\n    Base class for tabs, including menu link and displayed tab itself.\n    \"\"\"\n    Name = \"\"\n    Icon = \"\"\n    DataTab = \"\"\n    Active = False\n\n    def __init__(self):\n        \"\"\"\n        Initialize Tab object. Load base attributes and markup.\n        \"\"\"\n        self._menu_attrs = {\"data-tab\": self.DataTab}\n        self._tab_attrs = {\"data-tab\": self.DataTab}\n        self._menu = \"a.item\"\n        self._tab = \"div.ui.bottom.attached.tab.segment\"\n\n        if self.Active:\n            self._menu += \".active\"\n            self._tab += \".active\"\n\n    # ============================================== #\n\n    def menu_item(self):\n        \"\"\"\n        Returns menu item markup for given tab.\n        \"\"\"\n        return m(self._menu, self._menu_attrs, self.Name)\n\n    # ============================================== #\n\n    def tab_item(self):\n        \"\"\"\n        Returns tab item markup for given tab.\n        \"\"\"\n        return m(self._tab, self._tab_attrs, self.main_view())\n\n    # ============================================== #\n\n    def main_view(self):\n        \"\"\"\n        Returns main view markup for given tab.\n        \"\"\"\n        return m(\"div\", \"hello \" + self.Name)\n\n# ================================================== #\n\nclass TabledTab(Tab):\n    \"\"\"\n    Base class for tabs in the dashboard interface. Uses table and details view.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Initialize TabledTab object.\n        \"\"\"\n        super().__init__()\n        self.table = None\n        self.setup_table()\n        self.copiedDetails = \"\"\n        self._detailsId = self.DataTab + \"DetailsCodeBlock\"\n        self._copiedId = self.DataTab + \"CopiedCodeBlock\"\n        self._copyButtonId = self.DataTab + \"CopyButton\"\n        self._clearButtonId = self.DataTab + \"ClearButton\"\n\n    # ============================================== #\n\n    def setup_table(self):\n        \"\"\"\n        Sets up table object.\n        \"\"\"\n        self.table = Table([])\n\n    # ============================================== #\n\n    def _copyDetails(self):\n        self.copiedDetails = self.table.detailSelected\n\n    # ============================================== #\n\n    def _getRows(self):\n        return jQuery(\"[data-tab='{0}'].tab table > tbody > tr\".format(self.DataTab))\n\n    # ============================================== #\n\n    def _getLabel(self):\n        return jQuery(\".menu a[data-tab='{0}'] .ui.label\".format(self.DataTab))\n\n    # ============================================== #\n\n    def _clearCopy(self):\n        self.copiedDetails = \"\"\n\n    # ============================================== #\n\n    def menu_item(self):\n        return m(self._menu, self._menu_attrs,\n                 m(\"div.menu-item-text\", self.Name),\n                 m(self.Icon),\n                 m(\"div.ui.label.small\", \"{0}/{1}\".format(self.table.shown, self.table.total))\n                 )\n\n    # ============================================== #\n\n    def main_view(self):\n        return m(\"div\",\n                 m(\"div.table-container\", m(self.table.view)),\n                 m(\"div.ui.hidden.divider\"),\n                 m(\"div.ui.two.cards\", {\"style\": \"height: 45%;\"},\n                   m(\"div.ui.card\",\n                     m(\"div.content.small-header\",\n                       m(\"div.header\",\n                         m(\"span\", \"Details\"),\n                         m(\"span.ui.mini.right.floated.button\", {\"onclick\": self._copyDetails, \"id\": self._copyButtonId},\n                           \"Copy\")\n                         )\n                       ),\n                     m(\"pre.content.code-block\", {\"id\": self._detailsId},\n                       self.table.detailSelected\n                       )\n                     ),\n                   m(\"div.ui.card\",\n                     m(\"div.content.small-header\",\n                       m(\"div.header\",\n                         m(\"span\", \"Copied\"),\n                         m(\"span.ui.mini.right.floated.button\", {\"onclick\": self._clearCopy, \"id\": self._clearButtonId},\n                           \"Clear\")\n                         )\n                       ),\n                     m(\"pre.content.code-block\", {\"id\": self._copiedId},\n                       self.copiedDetails\n                       )\n                     )\n                   )\n                 )\n\n# ================================================== #\n\nclass Field:\n    \"\"\"\n    A field/column of a table.\n    \"\"\"\n    Title = None\n    Length = 4\n\n    __pragma__(\"kwargs\")\n    def __init__(self, title=None, length=None):\n        \"\"\"\n        Initialize Field object. Set title and length.\n        \"\"\"\n        self.title = self.Title\n        if title is not None:\n            self.title = title\n\n        self.mlength = self.Length\n        if length is not None:\n            self.mlength = length\n\n        self.name = self.title.lower()\n\n    __pragma__(\"nokwargs\")\n\n    # ============================================== #\n\n    def format(self, data):\n        \"\"\"\n        Formats the data to a string matching the expected view for this field.\n        \"\"\"\n        return str(data)\n\n    # ============================================== #\n\n    def shorten(self, string):\n        \"\"\"\n        Shortens the string to an appropriate length for display.\n        \"\"\"\n        return string\n\n    # ============================================== #\n\n    def view(self, data):\n        \"\"\"\n        Returns a vnode <td> suitable for display in a table.\n        \"\"\"\n        if data == None:\n            data = \"\"\n        formatted = self.format(data)\n        return m(\"td\", {\"title\": formatted}, self.shorten(formatted))\n\n# ================================================== #\n\nclass FillField(Field):\n    \"\"\"\n    Field that should \"use remaining space\" for display.\n    \"\"\"\n    Length = 100\n\n    def view(self, data):\n        node = super().view(data)\n        node.attrs[\"class\"] = \"fill-space\"\n        return node\n\n# ================================================== #\n\nclass DateField(Field):\n    \"\"\"\n    Field for displaying dates.\n    \"\"\"\n    Length = 12\n    Title = \"Date\"\n\n# ================================================== #\n\nclass EpochField(DateField):\n    \"\"\"\n    Field for displaying time since the epoch.\n    \"\"\"\n    def format(self, data):\n        # Make format match that of other typical dates from server\n        data = __new__(Date(data / 1000)).toISOString()\n        return super().format(data)\n\n# ================================================== #\n\nclass IDField(Field):\n    \"\"\"\n    Field for displaying ids.\n    \"\"\"\n    Length = 4\n    Title = \"UID\"\n    Header = \"\"\n    \"\"\"Stripped from beginning of string for displaying.\"\"\"\n\n    def format(self, string):\n        if string.startswith(self.Header):\n            string = string[len(self.Header):]\n\n        return super().format(string)\n\n# ================================================== #\n\nclass DIDField(IDField):\n    Header = \"did:dad:\"\n    Title = \"DID\"\n\n# ================================================== #\n\nclass Table:\n    \"\"\"\n    A table, its headers, and its data to be displayed.\n    \"\"\"\n    no_results_text = \"No results found.\"\n\n    def __init__(self, fields):\n        \"\"\"\n        Initializes the Table object.\n        \"\"\"\n        self.max_size = 1000\n        self.fields = fields\n        self.data = []\n        self._shownData = []\n        self.view = {\n            \"view\": self._view\n        }\n\n        self._selected = None\n        self.detailSelected = \"\"\n\n        self.filter = None\n        self.sortField = None\n        self.reversed = False\n\n        self.total = 0\n        self.shown = 0\n\n    # ============================================== #\n\n    def _stringify(self, obj):\n        \"\"\"\n        Converts the provided json-like object to a user-friendly string.\n        \"\"\"\n        def replacer(key, value):\n            if key.startswith(\"_\"):\n                return\n            return value\n        return JSON.stringify(obj, replacer, 2)\n\n    # ============================================== #\n\n    def _limitText(self):\n        return \"Limited to {} results.\".format(self.max_size)\n\n    # ============================================== #\n\n    def _selectRow(self, event, obj):\n        \"\"\"\n        Deselects any previously selected row and selects the row\n        specified in the event.\n        \"\"\"\n        if self._selected is not None:\n            del self._selected._selected\n\n            if self._selected._uid == obj._uid:\n                self._selected = None\n                self.detailSelected = \"\"\n                return\n\n        self._selected = obj\n        obj._selected = True\n        self.detailSelected = self._stringify(obj)\n\n    # ============================================== #\n\n    def refresh(self):\n        \"\"\"\n        Refreshes any data from the server and returns a promise which resolves\n        when finished.\n        \"\"\"\n        self._setData([])\n        p = __new__(Promise(lambda resolve: resolve()))\n        return Promise\n\n    # ============================================== #\n\n    def clear(self):\n        \"\"\"\n        Removes memory of all current data.\n        \"\"\"\n        self.total = 0\n        server.clearArray(self.data)\n\n    # ============================================== #\n\n    def _makeDummyData(self, count):\n        data = []\n        for i in range(count):\n            obj = {}\n            for field in self.fields:\n                obj[field.name] = \"test{0} {1}\".format(i, field.name)\n            data.append(obj)\n        return data\n\n    # ============================================== #\n\n    __pragma__(\"kwargs\")\n    def _setData(self, data, clear=True):\n        \"\"\"\n        Clears existing data and uses the provided data instead.\n        Adds a \"_uid\" field to each piece of data, for tracking internally.\n        \"\"\"\n        if clear:\n            self.clear()\n        for datum in data:\n            datum._uid = self.total\n            self.data.append(datum)\n            self.total += 1\n        self._processData()\n    __pragma__(\"nokwargs\")\n\n    # ============================================== #\n\n    def setFilter(self, func):\n        if func != self.filter:\n            self.filter = func\n            self._processData()\n\n    # ============================================== #\n\n    def setSort(self, field):\n        \"\"\"\n        Sets our sort to be on the given field.\n        If this is the same as our currently-sorting field, then reverses the sort\n        on that same field.\n        \"\"\"\n        if self.sortField == field:\n            self.reversed = not self.reversed\n        else:\n            self.reversed = False\n            self.sortField = field\n\n        self._sortData()\n\n    # ============================================== #\n\n    def _sortData(self):\n        if self.sortField is None:\n            return\n\n        self._shownData.sort(key=lambda obj: self._getField(obj, self.sortField), reverse=self.reversed)\n\n    # ============================================== #\n\n    def _processData(self):\n        \"\"\"\n        Processes our data, determining which items to show and putting them into\n        a list that is sorted if necessary.\n        \"\"\"\n        server.clearArray(self._shownData)\n\n        self.shown = 0\n        for obj in self.data:\n            if self.shown >= self.max_size:\n                break\n            if self.filter is not None:\n                if not self.filter(obj):\n                    continue\n\n            self._shownData.append(obj)\n            self.shown += 1\n\n        self._sortData()\n\n    # ============================================== #\n\n    def _getField(self, obj, field):\n        \"\"\"\n        Gets the info from the object matching the given field.\n        \"\"\"\n        return obj[field.name]\n\n    # ============================================== #\n\n    def _makeRow(self, obj):\n        \"\"\"\n        Returns an array of <td> vnodes representing a row.\n        \"\"\"\n        return [field.view(self._getField(obj, field)) for field in self.fields]\n\n    # ============================================== #\n\n    def _view(self):\n        headers = []\n        for field in self.fields:\n            def makeScope(f):\n                return lambda event: self.setSort(f)\n            if field == self.sortField:\n                if self.reversed:\n                    icon = m(\"i.arrow.down.icon\")\n                else:\n                    icon = m(\"i.arrow.up.icon\")\n                header = m(\"th.ui.right.labeled.icon\", {\"onclick\": makeScope(field)},\n                           icon,\n                           field.title)\n            else:\n                header = m(\"th\", {\"onclick\": makeScope(field)}, field.title)\n\n            headers.append(header)\n\n        rows = []\n        for obj in self._shownData:\n            row = self._makeRow(obj)\n\n            def makeScope(o):\n                return lambda event: self._selectRow(event, o)\n            if obj._selected:\n                rows.append(m(\"tr.active\", {\"onclick\": makeScope(obj)}, row))\n            else:\n                rows.append(m(\"tr\", {\"onclick\": makeScope(obj)}, row))\n\n        if self.shown >= self.max_size:\n            rows.append(m(\"tr\", m(\"td\", self._limitText())))\n\n        if not self.shown:\n            rows.append(m(\"tr\", m(\"td\", self.no_results_text)))\n\n        return m(\"table\", {\"class\": \"ui selectable celled unstackable single line left aligned table\"},\n                 m(\"thead\",\n                   m(\"tr\", {\"class\": \"center aligned\"}, headers)\n                   ),\n                 m(\"tbody\",\n                   rows\n                   )\n                 )\n\nclass ErrorsTable(Table):\n    def __init__(self):\n        fields = [\n            FillField(\"Title\"),\n            FillField(\"Message\"),\n            DateField(\"Time\")\n        ]\n        super().__init__(fields)\n\n    def refresh(self):\n        self.clear()\n        errors = server.manager.errors\n        return errors.refreshErrors().then(lambda: self._setData(errors.errors))\n\n    def _getField(self, obj, field):\n        if field.name == \"title\":\n            return obj.title\n        elif field.name == \"message\":\n            return obj.msg\n        elif field.name == \"time\":\n            return obj.time\n\nclass Errors(TabledTab):\n    Name = \"Errors\"\n    Icon = \"i.chart.bar.icon\"\n    DataTab = \"errors\"\n    Active = True\n\n    def setup_table(self):\n        self.table = ErrorsTable()\n\n# ================================================== #\n\nclass Tabs:\n    \"\"\"\n    Class for managing all displayed tabs.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize Tabs object. Load in all tabs and setup\n        document level functions.\n        \"\"\"\n        self.tabs = [Errors()]\n\n        self._refreshing = False\n        self._refreshPromise = None\n\n        jQuery(document).ready(lambda: jQuery('.menu > a.item').tab())\n\n        self.refresh()\n\n    def refresh(self):\n        \"\"\"\n        Retrieves server data and populates our tabs and tables.\n        \"\"\"\n        if self._refreshing:\n            return self._refreshPromise\n        self._refreshing = True\n\n        promises = []\n        for tab in self.tabs:\n            promises.append(tab.table.refresh())\n\n        def done():\n            self._refreshing = False\n\n        self._refreshPromise = Promise.all(promises)\n        self._refreshPromise.then(done)\n        self._refreshPromise.catch(done)\n        return self._refreshPromise\n\n    def currentTab(self):\n        \"\"\"\n        Returns current tab.\n        \"\"\"\n        active = jQuery(\".menu a.item.active\")\n        data_tab = active.attr(\"data-tab\")\n        for tab in self.tabs:\n            if tab.DataTab == data_tab:\n                return tab\n        return None\n\n    def view(self):\n        \"\"\"\n        Returns markup for view.\n        \"\"\"\n        menu_items = []\n        tab_items = []\n        for tab in self.tabs:\n            menu_items.append(tab.menu_item())\n            tab_items.append(tab.tab_item())\n\n        return m(\"div\",\n                 m(\"div.ui.top.attached.tabular.menu\",\n                   menu_items,\n                   m(\"a.item.tab\",\n                     m(\"span.menu-item-text\", \"Public Keys\"),\n                     m(\"i.key.icon\")),\n                   m(\"a.item.tab\",\n                     m(\"span.menu-item-text\", \"Encrypted Blobs\"),\n                     m(\"i.unlock.alternate.icon\")),\n                   m(\"a.item.tab\",\n                     m(\"span.menu-item-text\", \"Relay Servers\"),\n                     m(\"i.server.icon\")),\n                   m(\"a.item.tab\",\n                     m(\"span.menu-item-text\", \"Error Logs\"),\n                     m(\"i.exclamation.circle.icon\")),\n                   m(\"div.right.menu\",\n                     m(\"div.item\",\n                       m(\"div#search.ui.transparent.icon.input\",\n                         m(\"input[type=text][placeholder=Search...]\"),\n                         m(\"i.search.link.icon\"))))\n                   ),\n                 tab_items,\n\n                 )\n\n\n        \"\"\"m(\"div\",\n                 m(\"div.ui.top.attached.tabular.menu\",\n                   m(\"a.active.item.tab\",\n                     m(\"span.menu-item-text\", \"Server Status\"),\n                     m(\"i.chart.bar.icon\")),\n                   m(\"a.item.tab\",\n                     m(\"span.menu-item-text\", \"Public Keys\"),\n                     m(\"i.key.icon\")),\n                   m(\"a.item.tab\",\n                     m(\"span.menu-item-text\", \"Encrypted Blobs\"),\n                     m(\"i.unlock.alternate.icon\")),\n                   m(\"a.item.tab\",\n                     m(\"span.menu-item-text\", \"Relay Servers\"),\n                     m(\"i.server.icon\")),\n                   m(\"a.item.tab\",\n                     m(\"span.menu-item-text\", \"Error Logs\"),\n                     m(\"i.exclamation.circle.icon\")),\n                   m(\"div.right.menu\",\n                     m(\"div.item\",\n                       m(\"div#search.ui.transparent.icon.input\",\n                         m(\"input[type=text][placeholder=Search...]\"),\n                           m(\"i.search.link.icon\"))))),\n                 m(\"div.ui.bottom.attached.segment\",\n                   m(\"p\", \"Content Will be visible here.\")))\"\"\"\n\n# ================================================== #\n#                        EOF                         #\n# ================================================== #"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2lBA;AA3lBA;AAWA;AAMA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAMA;AAIA;AAAA;AAIA;AAIA;AAAA;AAIA;AAIA;AAAA;AAAA;AAIA;AAAA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAIA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AAIA;AAAA;AAKA;AAyBA;AAAA;AAAA;AASA;AAAA;AAIA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AAIA;AAIA;AAAA;AAIA;AAIA;AAAA;AAIA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAIA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AAAA;AAIA;AACA;AAAA;AAIA;AAAA;AAIA;AAEA;AACA;AAAA;AAAA;AAIA;AAAA;AAIA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAIA;AAAA;AACA;AACA;AAAA;AAIA;AAAA;AAIA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AAKA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAIA;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AAIA;AAIA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAIA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AAKA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAIA;AAIA;AAAA;AAIA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAMA;AAAA;AAAA;AAKA;AAAA;AACA;AAIA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAIA;AAAA;AAKA;AAKA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AAAA;AAEA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}