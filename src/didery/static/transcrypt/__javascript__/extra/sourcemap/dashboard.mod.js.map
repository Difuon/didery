{
	"version": 3,
	"file": "/Users/bradyhammond/Documents/Xaltry/didery/src/didery/static/transcrypt/__javascript__/dashboard.mod.js",
	"sources": [
		"/Users/bradyhammond/Documents/Xaltry/didery/src/didery/static/transcrypt/dashboard.py"
	],
	"sourcesContent": [
		"# ================================================== #\n#                     DASHBOARD                      #\n# ================================================== #\n# Author: Brady Hammond                              #\n# Created: 04/26/2018                                #\n# Last Edited:                                       #\n# Last Edited By:                                    #\n# ================================================== #\n#                      IMPORTS                       #\n# ================================================== #\n\nimport components.tabs as tabs\n\n# ================================================== #\n#                  CLASS DEFINITIONS                 #\n# ================================================== #\n\nclass Manager:\n    \"\"\"\n    Class for managing all displayed tabs.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize Tabs object. Load in all tabs and setup\n        document level functions.\n        \"\"\"\n        self.tabs = [tabs.Errors()]\n\n        self._refreshing = False\n        self._refreshPromise = None\n\n        jQuery(document).ready(lambda: jQuery('.menu > a.item').tab())\n\n        self.refresh()\n\n    def refresh(self):\n        \"\"\"\n        Retrieves server data and populates our tabs and tables.\n        \"\"\"\n        if self._refreshing:\n            return self._refreshPromise\n        self._refreshing = True\n\n        promises = []\n        for tab in self.tabs:\n            promises.append(tab.table.refresh())\n\n        def done():\n            self._refreshing = False\n\n        self._refreshPromise = Promise.all(promises)\n        self._refreshPromise.then(done)\n        self._refreshPromise.catch(done)\n        return self._refreshPromise\n\n    def currentTab(self):\n        \"\"\"\n        Returns current tab.\n        \"\"\"\n        active = jQuery(\".menu a.item.active\")\n        data_tab = active.attr(\"data-tab\")\n        for tab in self.tabs:\n            if tab.DataTab == data_tab:\n                return tab\n        return None\n\n    def view(self):\n        \"\"\"\n        Returns markup for view.\n        \"\"\"\n        menu_items = []\n        tab_items = []\n        for tab in self.tabs:\n            menu_items.append(tab.menu_item())\n            tab_items.append(tab.tab_item())\n\n        return m(\"div\",\n                 m(\"div.ui.top.attached.tabular.menu\",\n                   m(\"a.item.tab\",\n                     m(\"span.menu-item-text\", \"Server Status\"),\n                     m(\"i.chart.bar.icon\")),\n                   m(\"a.item.tab\",\n                     m(\"span.menu-item-text\", \"Public Keys\"),\n                     m(\"i.key.icon\")),\n                   m(\"a.item.tab\",\n                     m(\"span.menu-item-text\", \"Encrypted Blobs\"),\n                     m(\"i.unlock.alternate.icon\")),\n                   m(\"a.item.tab\",\n                     m(\"span.menu-item-text\", \"Relay Servers\"),\n                     m(\"i.server.icon\")),\n                   menu_items,\n                   m(\"div.right.menu\",\n                     m(\"div.item\",\n                       m(\"div#search.ui.transparent.icon.input\",\n                         m(\"input[type=text][placeholder=Search...]\"),\n                         m(\"i.search.link.icon\"))))\n                   ),\n                 tab_items,\n\n                 )\n\n\n        \"\"\"m(\"div\",\n                 m(\"div.ui.top.attached.tabular.menu\",\n                   m(\"a.active.item.tab\",\n                     m(\"span.menu-item-text\", \"Server Status\"),\n                     m(\"i.chart.bar.icon\")),\n                   m(\"a.item.tab\",\n                     m(\"span.menu-item-text\", \"Public Keys\"),\n                     m(\"i.key.icon\")),\n                   m(\"a.item.tab\",\n                     m(\"span.menu-item-text\", \"Encrypted Blobs\"),\n                     m(\"i.unlock.alternate.icon\")),\n                   m(\"a.item.tab\",\n                     m(\"span.menu-item-text\", \"Relay Servers\"),\n                     m(\"i.server.icon\")),\n                   m(\"a.item.tab\",\n                     m(\"span.menu-item-text\", \"Error Logs\"),\n                     m(\"i.exclamation.circle.icon\")),\n                   m(\"div.right.menu\",\n                     m(\"div.item\",\n                       m(\"div#search.ui.transparent.icon.input\",\n                         m(\"input[type=text][placeholder=Search...]\"),\n                           m(\"i.search.link.icon\"))))),\n                 m(\"div.ui.bottom.attached.segment\",\n                   m(\"p\", \"Content Will be visible here.\")))\"\"\"\n\n# ================================================== #\n#                        EOF                         #\n# ================================================== #"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAMA;AAAA;AAKA;AAKA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AAAA;AAEA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}